/* The following code was generated by JFlex 1.6.1 */

package Proyecto1;
import java.io.InputStream;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico_archivo2.jflex</tt>
 */
public class analizador2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 38,  4,  0, 38,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    38,  0,  0,  0,  0,  0,  0,  0, 33, 34,  0,  0, 35,  0, 36, 18, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 32, 17, 37, 19,  0, 
     0, 12, 30, 10, 22,  7, 31,  2, 28, 15, 21,  2, 24, 27, 11, 16, 
    20,  2, 13,  9, 26, 23, 29,  2, 25,  2,  2,  0,  0,  0,  0,  3, 
     0, 12, 30, 10, 22,  7, 31,  2, 28, 15, 21,  2, 24, 27, 11, 16, 
    20,  2, 13,  9, 26, 23, 29,  2, 25,  2,  2,  0,  6,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\3\3\1\6"+
    "\1\7\1\3\1\10\1\11\1\12\1\13\1\1\1\14"+
    "\1\5\1\15\1\1\1\0\4\3\11\0\1\3\1\16"+
    "\1\0\4\3\21\0\1\3\1\0\3\3\1\17\23\0"+
    "\1\3\1\0\2\3\1\20\23\0\1\21\1\0\1\3"+
    "\1\22\17\0\1\23\4\0\1\3\1\0\1\24\1\25"+
    "\6\0\1\26\7\0\1\27\1\0\1\3\1\30\2\0"+
    "\1\31\1\32\4\0\1\33\2\0\1\34\1\0\2\35"+
    "\1\0\1\36\2\0\1\37\2\0\1\40\3\0\1\41"+
    "\2\0\1\42\2\0\1\43\1\0\1\44\1\0\1\45"+
    "\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\47\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\47\0\u0186\0\47\0\47\0\47"+
    "\0\47\0\u01ad\0\47\0\234\0\234\0\234\0\u01d4\0\u01fb"+
    "\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\47\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4"+
    "\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec"+
    "\0\u0813\0\165\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd"+
    "\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35"+
    "\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d"+
    "\0\u0b94\0\165\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e"+
    "\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6"+
    "\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\165\0\u0ea0\0\u0ec7"+
    "\0\165\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8"+
    "\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110"+
    "\0\47\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\47"+
    "\0\47\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\47"+
    "\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\47"+
    "\0\u141c\0\u1443\0\47\0\u146a\0\u1491\0\47\0\47\0\u14b8"+
    "\0\u14df\0\u1506\0\u152d\0\47\0\u1554\0\u157b\0\47\0\u15a2"+
    "\0\47\0\165\0\u15c9\0\47\0\u15f0\0\u1617\0\47\0\u163e"+
    "\0\u1665\0\47\0\u168c\0\u16b3\0\u16da\0\47\0\u1701\0\u1728"+
    "\0\47\0\u174f\0\u1776\0\47\0\u179d\0\47\0\u17c4\0\47"+
    "\0\47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\2\2\4\1\11\1\12\1\4\1\2\2\4\1\13"+
    "\1\2\1\14\13\4\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\50\0\1\3\46\0\3\4\3\0"+
    "\1\4\1\0\5\4\1\0\2\4\3\0\14\4\13\0"+
    "\2\25\40\0\1\25\4\0\1\26\1\25\40\0\1\25"+
    "\1\0\3\4\3\0\1\4\1\27\1\30\4\4\1\0"+
    "\2\4\3\0\14\4\10\0\3\4\3\0\1\4\1\0"+
    "\5\4\1\0\1\4\1\31\3\0\14\4\10\0\3\4"+
    "\3\0\1\4\1\0\2\4\1\32\2\4\1\0\2\4"+
    "\3\0\4\4\1\33\7\4\16\0\1\34\2\35\2\0"+
    "\1\36\5\0\1\37\1\0\1\40\6\0\1\41\1\42"+
    "\1\43\1\44\11\0\3\4\3\0\1\4\1\0\5\4"+
    "\1\0\1\4\1\45\3\0\14\4\53\0\1\46\14\0"+
    "\1\47\35\0\3\4\3\0\1\4\1\0\1\4\1\50"+
    "\3\4\1\0\2\4\3\0\14\4\10\0\3\4\3\0"+
    "\1\4\1\0\5\4\1\0\2\4\3\0\7\4\1\51"+
    "\4\4\10\0\3\4\3\0\1\4\1\0\1\4\1\52"+
    "\3\4\1\0\2\4\3\0\14\4\10\0\3\4\3\0"+
    "\1\4\1\0\5\4\1\0\2\4\3\0\6\4\1\53"+
    "\5\4\40\0\1\54\44\0\1\55\34\0\1\56\40\0"+
    "\1\57\2\60\2\0\1\61\7\0\1\62\6\0\1\63"+
    "\1\64\1\65\1\66\17\0\1\67\4\0\1\70\41\0"+
    "\1\71\46\0\1\72\55\0\2\73\47\0\1\74\27\0"+
    "\3\4\3\0\1\4\1\0\2\4\1\75\2\4\1\0"+
    "\2\4\3\0\14\4\16\0\1\76\40\0\3\4\3\0"+
    "\1\77\1\0\5\4\1\0\2\4\3\0\14\4\10\0"+
    "\3\4\3\0\1\4\1\0\5\4\1\0\2\4\3\0"+
    "\12\4\1\100\1\4\10\0\3\4\3\0\1\4\1\0"+
    "\5\4\1\0\2\4\3\0\10\4\1\101\3\4\10\0"+
    "\3\4\3\0\1\4\1\0\5\4\1\0\1\4\1\102"+
    "\3\0\14\4\41\0\1\103\23\0\1\104\72\0\1\105"+
    "\23\0\2\106\17\0\1\107\44\0\1\110\34\0\1\111"+
    "\40\0\1\112\4\0\1\113\41\0\1\114\46\0\1\115"+
    "\55\0\2\116\47\0\1\117\43\0\1\120\46\0\1\121"+
    "\63\0\1\122\31\0\1\123\61\0\1\124\31\0\1\125"+
    "\34\0\3\4\3\0\1\4\1\0\5\4\1\0\2\4"+
    "\3\0\2\4\1\126\11\4\22\0\1\127\34\0\3\4"+
    "\3\0\1\4\1\0\2\4\1\130\2\4\1\0\2\4"+
    "\3\0\14\4\10\0\3\4\3\0\1\4\1\0\4\4"+
    "\1\131\1\0\2\4\3\0\14\4\10\0\3\4\3\0"+
    "\1\4\1\0\5\4\1\0\1\4\1\132\3\0\14\4"+
    "\24\0\1\133\61\0\1\134\32\0\1\135\44\0\1\136"+
    "\66\0\1\137\23\0\1\140\72\0\1\141\30\0\1\142"+
    "\46\0\1\143\63\0\1\144\31\0\1\145\61\0\1\146"+
    "\31\0\1\147\43\0\2\150\44\0\1\151\53\0\1\152"+
    "\52\0\1\153\56\0\1\154\45\0\1\155\20\0\3\4"+
    "\3\0\1\4\1\0\5\4\1\0\1\4\1\156\3\0"+
    "\14\4\23\0\1\157\33\0\3\4\3\0\1\4\1\0"+
    "\3\4\1\160\1\4\1\0\2\4\3\0\14\4\10\0"+
    "\3\4\3\0\1\161\1\0\5\4\1\0\2\4\3\0"+
    "\14\4\23\0\1\162\52\0\1\163\36\0\2\164\44\0"+
    "\1\165\54\0\1\166\61\0\1\167\32\0\1\170\42\0"+
    "\2\171\44\0\1\172\53\0\1\173\52\0\1\174\56\0"+
    "\1\175\45\0\1\176\37\0\1\177\54\0\1\200\43\0"+
    "\1\201\32\0\1\202\53\0\1\203\42\0\2\204\52\0"+
    "\1\205\32\0\3\4\3\0\1\4\1\0\4\4\1\206"+
    "\1\0\2\4\3\0\14\4\17\0\2\207\60\0\1\210"+
    "\46\0\1\211\36\0\1\212\47\0\1\213\52\0\1\214"+
    "\36\0\2\215\55\0\1\216\54\0\1\217\43\0\1\220"+
    "\32\0\1\221\53\0\1\222\42\0\2\223\50\0\1\224"+
    "\42\0\1\225\47\0\2\226\50\0\1\227\56\0\1\230"+
    "\41\0\2\231\30\0\3\4\3\0\1\4\1\0\5\4"+
    "\1\231\1\232\1\4\3\0\14\4\32\0\1\233\37\0"+
    "\1\234\42\0\2\235\60\0\1\236\46\0\1\237\36\0"+
    "\1\240\42\0\1\241\47\0\2\242\50\0\1\243\56\0"+
    "\1\244\37\0\1\245\42\0\2\246\60\0\1\247\43\0"+
    "\1\250\46\0\1\251\27\0\3\4\3\0\1\4\1\0"+
    "\5\4\1\0\1\4\1\252\3\0\14\4\24\0\1\253"+
    "\54\0\1\254\37\0\1\255\42\0\2\256\60\0\1\257"+
    "\43\0\1\260\53\0\1\261\44\0\1\262\33\0\2\263"+
    "\53\0\2\264\54\0\1\265\44\0\1\266\33\0\2\267"+
    "\44\0\1\270\62\0\1\271\43\0\1\272\35\0\1\273"+
    "\62\0\1\274\33\0\2\275\60\0\1\276\33\0\2\277"+
    "\60\0\1\300\46\0\1\301\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6123];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\4\1\1\11\1\1\4\11"+
    "\1\1\1\11\3\1\1\0\4\1\11\0\1\1\1\11"+
    "\1\0\4\1\21\0\1\1\1\0\4\1\23\0\1\1"+
    "\1\0\3\1\23\0\1\1\1\0\2\1\17\0\1\11"+
    "\4\0\1\1\1\0\2\11\6\0\1\11\7\0\1\11"+
    "\1\0\1\1\1\11\2\0\2\11\4\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\1\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\3\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public analizador2(java.io.Reader in) {
    this.zzReader = in;
  }

    analizador2(InputStream in) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new Symbol(sym2.EOF, null); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*se ignoran */
            }
          case 39: break;
          case 2: 
            { return new Symbol(sym2.num, yychar,yyline,new String(yytext()));
            }
          case 40: break;
          case 3: 
            { return new Symbol(sym2.id, yychar,yyline,new String(yytext()));
            }
          case 41: break;
          case 4: 
            { yychar=0; yyline=0;
            }
          case 42: break;
          case 5: 
            { /*no hace nada, aumenta una columna*/yychar++;
            }
          case 43: break;
          case 6: 
            { return new Symbol(sym2.menorq,yychar,yyline,new String(yytext()));
            }
          case 44: break;
          case 7: 
            { return new Symbol(sym2.mayorq,yychar,yyline,new String(yytext()));
            }
          case 45: break;
          case 8: 
            { return new Symbol(sym2.pcoma,yychar,yyline,new String(yytext()));
            }
          case 46: break;
          case 9: 
            { return new Symbol(sym2.pizq,yychar,yyline,new String(yytext()));
            }
          case 47: break;
          case 10: 
            { return new Symbol(sym2.pder,yychar,yyline,new String(yytext()));
            }
          case 48: break;
          case 11: 
            { return new Symbol(sym2.coma,yychar,yyline,new String(yytext()));
            }
          case 49: break;
          case 12: 
            { return new Symbol(sym2.igual,yychar,yyline,new String(yytext()));
            }
          case 50: break;
          case 13: 
            { /* Se ignoran */
            }
          case 51: break;
          case 14: 
            { return new Symbol(sym2.rp,yychar,yyline,new String(yytext()));
            }
          case 52: break;
          case 15: 
            { return new Symbol(sym2.alto, yychar,yyline,new String(yytext()));
            }
          case 53: break;
          case 16: 
            { return new Symbol(sym2.ancho, yychar,yyline,new String(yytext()));
            }
          case 54: break;
          case 17: 
            { return new Symbol(sym2.fondo,yychar,yyline,new String(yytext()));
            }
          case 55: break;
          case 18: 
            { return new Symbol(sym2.nombre,yychar,yyline,new String(yytext()));
            }
          case 56: break;
          case 19: 
            { return new Symbol(sym2.meta,yychar,yyline,new String(yytext()));
            }
          case 57: break;
          case 20: 
            { return new Symbol(sym2.suelo,yychar,yyline,new String(yytext()));
            }
          case 58: break;
          case 21: 
            { return new Symbol(sym2.armas,yychar,yyline,new String(yytext()));
            }
          case 59: break;
          case 22: 
            { return new Symbol(sym2.cmeta,yychar,yyline,new String(yytext()));
            }
          case 60: break;
          case 23: 
            { return new Symbol(sym2.bonus,yychar,yyline,new String(yytext()));
            }
          case 61: break;
          case 24: 
            { return new Symbol(sym2.extras,yychar,yyline,new String(yytext()));
            }
          case 62: break;
          case 25: 
            { return new Symbol(sym2.csuelo,yychar,yyline,new String(yytext()));
            }
          case 63: break;
          case 26: 
            { return new Symbol(sym2.carmas,yychar,yyline,new String(yytext()));
            }
          case 64: break;
          case 27: 
            { return new Symbol(sym2.cbonus,yychar,yyline,new String(yytext()));
            }
          case 65: break;
          case 28: 
            { return new Symbol(sym2.heroes,yychar,yyline,new String(yytext()));
            }
          case 66: break;
          case 29: 
            { return new Symbol(sym2.escenario,yychar,yyline,new String(yytext()));
            }
          case 67: break;
          case 30: 
            { return new Symbol(sym2.cextras,yychar,yyline,new String(yytext()));
            }
          case 68: break;
          case 31: 
            { return new Symbol(sym2.cheroes,yychar,yyline,new String(yytext()));
            }
          case 69: break;
          case 32: 
            { return new Symbol(sym2.paredes,yychar,yyline,new String(yytext()));
            }
          case 70: break;
          case 33: 
            { return new Symbol(sym2.cparedes,yychar,yyline,new String(yytext()));
            }
          case 71: break;
          case 34: 
            { return new Symbol(sym2.villanos,yychar,yyline,new String(yytext()));
            }
          case 72: break;
          case 35: 
            { return new Symbol(sym2.cvillanos,yychar,yyline,new String(yytext()));
            }
          case 73: break;
          case 36: 
            { return new Symbol(sym2.cescenario,yychar,yyline,new String(yytext()));
            }
          case 74: break;
          case 37: 
            { return new Symbol(sym2.personajes,yychar,yyline,new String(yytext()));
            }
          case 75: break;
          case 38: 
            { return new Symbol(sym2.cpersonajes,yychar,yyline,new String(yytext()));
            }
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
