
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Proyecto1;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.Hashtable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym1.class;
}

  /** Default constructor. */
  @Deprecated
  public parser1() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\012\000\002\022" +
    "\005\000\002\017\012\000\002\003\016\000\002\003\014" +
    "\000\002\020\012\000\002\004\005\000\002\004\003\000" +
    "\002\014\003\000\002\014\003\000\002\011\034\000\002" +
    "\013\030\000\002\021\012\000\002\005\005\000\002\005" +
    "\003\000\002\016\003\000\002\016\003\000\002\010\024" +
    "\000\002\015\020\000\002\012\003\000\002\012\003\000" +
    "\002\023\007\000\002\006\005\000\002\006\004\000\002" +
    "\024\005\000\002\007\004\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\004\005\001\002\000\004\002\200\001" +
    "\002\000\004\005\006\001\002\000\004\011\007\001\002" +
    "\000\004\004\010\001\002\000\004\006\155\001\002\000" +
    "\004\004\020\001\002\000\004\004\013\001\002\000\004" +
    "\027\014\001\002\000\004\005\015\001\002\000\004\011" +
    "\016\001\002\000\004\002\000\001\002\000\004\004\112" +
    "\001\002\000\004\007\021\001\002\000\004\011\022\001" +
    "\002\000\004\024\027\001\002\000\004\004\106\001\002" +
    "\000\006\004\ufff7\020\ufff7\001\002\000\006\004\ufff8\020" +
    "\ufff8\001\002\000\006\004\ufff9\020\104\001\002\000\004" +
    "\012\030\001\002\000\004\022\031\001\002\000\004\026" +
    "\032\001\002\000\004\021\033\001\002\000\004\017\034" +
    "\001\002\000\004\022\035\001\002\000\004\025\036\001" +
    "\002\000\004\021\037\001\002\000\004\013\040\001\002" +
    "\000\004\022\041\001\002\000\004\030\043\001\002\000" +
    "\004\021\054\001\002\000\004\027\044\001\002\000\004" +
    "\026\053\001\002\000\006\027\047\031\046\001\002\000" +
    "\004\032\051\001\002\000\004\026\050\001\002\000\006" +
    "\027\uffea\031\uffea\001\002\000\004\030\052\001\002\000" +
    "\004\021\uffeb\001\002\000\006\027\uffe9\031\uffe9\001\002" +
    "\000\004\014\055\001\002\000\004\022\056\001\002\000" +
    "\004\026\057\001\002\000\004\021\060\001\002\000\006" +
    "\015\061\016\062\001\002\000\004\022\100\001\002\000" +
    "\004\022\063\001\002\000\004\025\064\001\002\000\004" +
    "\021\065\001\002\000\004\015\066\001\002\000\004\022" +
    "\067\001\002\000\004\030\070\001\002\000\004\026\075" +
    "\001\002\000\004\021\072\001\002\000\004\023\073\001" +
    "\002\000\006\004\ufff6\020\ufff6\001\002\000\006\026\077" +
    "\030\076\001\002\000\006\026\uffe6\030\uffe6\001\002\000" +
    "\004\021\uffe8\001\002\000\006\026\uffe7\030\uffe7\001\002" +
    "\000\004\030\070\001\002\000\004\021\102\001\002\000" +
    "\004\023\103\001\002\000\006\004\ufff5\020\ufff5\001\002" +
    "\000\004\024\027\001\002\000\004\004\ufffa\001\002\000" +
    "\004\027\107\001\002\000\004\007\110\001\002\000\004" +
    "\011\111\001\002\000\004\004\ufffb\001\002\000\004\010" +
    "\114\001\002\000\004\004\uffff\001\002\000\004\011\115" +
    "\001\002\000\004\024\121\001\002\000\004\004\151\001" +
    "\002\000\006\004\ufff0\020\ufff0\001\002\000\006\004\ufff1" +
    "\020\ufff1\001\002\000\004\012\125\001\002\000\006\004" +
    "\ufff2\020\123\001\002\000\004\024\121\001\002\000\004" +
    "\004\ufff3\001\002\000\004\022\126\001\002\000\004\026" +
    "\127\001\002\000\004\021\130\001\002\000\004\013\131" +
    "\001\002\000\004\022\132\001\002\000\004\030\043\001" +
    "\002\000\004\021\134\001\002\000\004\014\135\001\002" +
    "\000\004\022\136\001\002\000\004\026\137\001\002\000" +
    "\004\021\140\001\002\000\010\016\143\023\144\033\141" +
    "\001\002\000\004\022\uffed\001\002\000\004\022\145\001" +
    "\002\000\004\022\uffec\001\002\000\006\004\uffee\020\uffee" +
    "\001\002\000\004\025\146\001\002\000\004\021\147\001" +
    "\002\000\004\023\150\001\002\000\006\004\uffef\020\uffef" +
    "\001\002\000\004\027\152\001\002\000\004\010\153\001" +
    "\002\000\004\011\154\001\002\000\004\004\ufff4\001\002" +
    "\000\004\011\156\001\002\000\004\024\160\001\002\000" +
    "\004\004\174\001\002\000\004\012\161\001\002\000\004" +
    "\022\162\001\002\000\004\026\163\001\002\000\004\021" +
    "\164\001\002\000\004\013\165\001\002\000\004\022\166" +
    "\001\002\000\004\030\043\001\002\000\004\021\170\001" +
    "\002\000\004\023\171\001\002\000\006\004\ufffc\020\172" +
    "\001\002\000\004\024\160\001\002\000\004\004\ufffd\001" +
    "\002\000\004\027\175\001\002\000\004\006\176\001\002" +
    "\000\004\011\177\001\002\000\004\004\ufffe\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\010\022\011" +
    "\001\001\000\002\001\001\000\004\020\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\022\011\024" +
    "\013\023\014\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\041\001\001\000\002\001\001\000\004\006\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\070\001\001\000\004\007\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\104\011\024\013\023\014" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\115" +
    "\010\117\015\116\016\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\123\010\117\015\116\016\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 //METODOS DEL PARSER//            
      public static void main(String args[]) throws Exception{
		//new parser(new analizador1(new FileInputStream(args[0]))).parse();
		new parser1(new analizador1(System.in)).parse();
	}
	public void syntax_error(Symbol s){
		report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}
public static Hashtable<String,SimboloFondos> TsimbolosF=new Hashtable<String,SimboloFondos>(); 
public static Hashtable<String,SimboloFigura> TsimbolosFI=new Hashtable<String,SimboloFigura>(); 
public static Hashtable<String,SimboloDiseño> TsimbolosD=new Hashtable<String,SimboloDiseño>(); 
public int keyF =1;
public int keyFI =1;
public int keyD =1;
public String path="";
public String cadena="";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser1 parser;

  /** Constructor */
  CUP$parser$actions(parser1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= menorq config mayorq CONFIGURACION menorq slash config mayorq 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONFIGURACION ::= FONDO FIGURA DISENO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FONDO ::= menorq fondo mayorq F menorq slash fondo mayorq 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FONDO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // F ::= llaveizq nombre igual id pcoma imagen igual PATH pcoma llaveder coma F 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  SimboloFondos nuevo = new SimboloFondos();
        nuevo.setId(Integer.toString(keyF));
        nuevo.setNombre(val1);
        nuevo.setImagen(val2);
        TsimbolosF.put("1",nuevo);
        keyF++;
        path="";
        System.out.println(TsimbolosF.get("1").getId()+TsimbolosF.get("1").getNombre()+TsimbolosF.get("1").getImagen());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // F ::= llaveizq nombre igual id pcoma imagen igual PATH pcoma llaveder 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  SimboloFondos nuevo = new SimboloFondos();
        nuevo.setId(Integer.toString(keyF));
        nuevo.setNombre(val1);
        nuevo.setImagen(val2);
        TsimbolosF.put("1",nuevo);
        keyF++;
        path="";
        System.out.println(TsimbolosF.get("1").getId()+TsimbolosF.get("1").getNombre()+TsimbolosF.get("1").getImagen());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FIGURA ::= menorq figura mayorq FI menorq slash figura mayorq 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIGURA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FI ::= FI0 coma FI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FI",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FI ::= FI0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FI",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FI0 ::= FI1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FI0",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FI0 ::= FI2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FI0",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FI1 ::= llaveizq nombre igual id pcoma vida igual num pcoma imagen igual PATH pcoma tipo igual id pcoma destruir igual num pcoma descripcion igual CADENA pcoma llaveder 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int val4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int val4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String val4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int val5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  SimboloFigura nuevo = new SimboloFigura();
        nuevo.setId(Integer.toString(keyFI));
        nuevo.setNombre(val1);
        nuevo.setImagen(val2);
        nuevo.setVida(val3);
        nuevo.setTipo(val4);
        nuevo.setdestruye(val5);
        nuevo.setdescripcion(val6);
        TsimbolosFI.put("1",nuevo);
        keyFI++;
        path="";
        System.out.println(TsimbolosFI.get("1").getId()+TsimbolosFI.get("1").getNombre()+TsimbolosFI.get("1").getdescripcion());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FI1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FI2 ::= llaveizq nombre igual id pcoma vida igual num pcoma imagen igual PATH pcoma tipo igual id pcoma descripcion igual CADENA pcoma llaveder 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int val4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  SimboloFigura nuevo = new SimboloFigura();
        nuevo.setId(Integer.toString(keyFI));
        nuevo.setNombre(val1);
        nuevo.setImagen(val2);
        nuevo.setVida(val3);
        nuevo.setTipo(val4);
        nuevo.setdestruye("0");
        nuevo.setdescripcion(val5);
        TsimbolosFI.put("1",nuevo);
        keyFI++;
        path="";
        System.out.println(TsimbolosFI.get("1").getId()+TsimbolosFI.get("1").getNombre()+TsimbolosFI.get("1").getdescripcion());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FI2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DISENO ::= menorq diseno mayorq D menorq slash diseno mayorq 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DISENO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // D ::= D0 coma D 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // D ::= D0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // D0 ::= D1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // D0 ::= D2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("D0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // D1 ::= llaveizq nombre igual id pcoma imagen igual PATH pcoma tipo igual id pcoma T igual num pcoma llaveder 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  SimboloDiseño nuevo = new SimboloDiseño();
        nuevo.setId(Integer.toString(keyD));
        nuevo.setNombre(val1);
        nuevo.setImagen(val2);
        nuevo.setpts(val4);
        nuevo.setTipo(val3);
        TsimbolosD.put("1",nuevo);
        keyD++;
        path="";
        System.out.println(TsimbolosD.get("1").getId()+TsimbolosD.get("1").getNombre()+TsimbolosD.get("1").getpts());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // D2 ::= llaveizq nombre igual id pcoma imagen igual PATH pcoma tipo igual id pcoma llaveder 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  SimboloDiseño nuevo = new SimboloDiseño();
        nuevo.setId(Integer.toString(keyD));
        nuevo.setNombre(val1);
        nuevo.setImagen(val2);
        nuevo.setpts("0");
        nuevo.setTipo(val3);
        TsimbolosD.put("1",nuevo);
        keyD++;
        path="";
        System.out.println(TsimbolosD.get("1").getId()+TsimbolosD.get("1").getNombre()+TsimbolosD.get("1").getpts());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T ::= creditos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T ::= destruir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PATH ::= comilla P punto ext comilla 
            {
              String RESULT =null;
		int val5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object val5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=(val5+val2+val3);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PATH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // P ::= P slash id 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 path=path+val1+val2;
     RESULT=(path);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // P ::= slash id 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 path=path+val1+val2;
     RESULT=(path);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CADENA ::= comilla C comilla 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=(val1+val2+val3);
       cadena="";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // C ::= C id 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cadena=cadena+val1+" ";
     RESULT=(cadena);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // C ::= id 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cadena=cadena+val1+" ";
     RESULT=(cadena);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
    }

}
