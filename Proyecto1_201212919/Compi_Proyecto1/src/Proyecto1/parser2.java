
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Proyecto1;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.Hashtable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym2.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\005\026\000\002\011\004\000\002\011\003" +
    "\000\002\004\012\000\002\004\005\000\002\004\005\000" +
    "\002\004\012\000\002\004\005\000\002\003\004\000\002" +
    "\003\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\006\011\000\002\007\013\000\002\010\013" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\004\005\001\002\000\004\002\114\001" +
    "\002\000\004\020\010\001\002\000\006\002\uffff\004\005" +
    "\001\002\000\004\002\000\001\002\000\004\017\011\001" +
    "\002\000\004\013\012\001\002\000\004\045\013\001\002" +
    "\000\004\012\014\001\002\000\004\006\015\001\002\000" +
    "\004\013\016\001\002\000\004\045\017\001\002\000\004" +
    "\012\020\001\002\000\004\005\021\001\002\000\004\013" +
    "\022\001\002\000\004\044\023\001\002\000\004\012\024" +
    "\001\002\000\004\007\025\001\002\000\004\013\026\001" +
    "\002\000\004\044\027\001\002\000\004\010\030\001\002" +
    "\000\014\023\034\024\031\027\033\031\032\033\035\001" +
    "\002\000\004\045\047\001\002\000\004\041\103\001\002" +
    "\000\004\045\047\001\002\000\004\034\072\001\002\000" +
    "\004\045\047\001\002\000\004\021\041\001\002\000\016" +
    "\021\ufffc\023\034\024\031\027\033\031\032\033\035\001" +
    "\002\000\004\021\ufffd\001\002\000\006\002\ufffe\004\ufffe" +
    "\001\002\000\022\025\ufff4\026\ufff4\032\ufff4\035\ufff4\036" +
    "\ufff4\040\ufff4\042\ufff4\045\ufff4\001\002\000\022\025\ufff5" +
    "\026\ufff5\032\ufff5\035\ufff5\036\ufff5\040\ufff5\042\ufff5\045" +
    "\047\001\002\000\004\032\070\001\002\000\022\025\ufff2" +
    "\026\ufff2\032\ufff2\035\ufff2\036\ufff2\040\ufff2\042\ufff2\045" +
    "\ufff2\001\002\000\022\025\ufff3\026\ufff3\032\ufff3\035\ufff3" +
    "\036\ufff3\040\ufff3\042\ufff3\045\ufff3\001\002\000\004\015" +
    "\050\001\002\000\004\044\051\001\002\000\006\011\053" +
    "\016\052\001\002\000\004\044\063\001\002\000\004\044" +
    "\054\001\002\000\006\014\055\016\056\001\002\000\004" +
    "\012\062\001\002\000\004\044\057\001\002\000\004\014" +
    "\060\001\002\000\004\012\061\001\002\000\022\025\uffef" +
    "\026\uffef\032\uffef\035\uffef\036\uffef\040\uffef\042\uffef\045" +
    "\uffef\001\002\000\022\025\ufff1\026\ufff1\032\ufff1\035\ufff1" +
    "\036\ufff1\040\ufff1\042\ufff1\045\ufff1\001\002\000\004\011" +
    "\064\001\002\000\004\044\065\001\002\000\004\014\066" +
    "\001\002\000\004\012\067\001\002\000\022\025\ufff0\026" +
    "\ufff0\032\ufff0\035\ufff0\036\ufff0\040\ufff0\042\ufff0\045\ufff0" +
    "\001\002\000\016\021\ufff7\023\ufff7\024\ufff7\027\ufff7\031" +
    "\ufff7\033\ufff7\001\002\000\020\025\ufff6\026\ufff6\032\ufff6" +
    "\035\ufff6\036\ufff6\040\ufff6\042\ufff6\001\002\000\004\045" +
    "\047\001\002\000\004\035\074\001\002\000\004\037\075" +
    "\001\002\000\004\045\047\001\002\000\004\036\077\001" +
    "\002\000\004\022\100\001\002\000\016\021\ufffb\023\ufffb" +
    "\024\ufffb\027\ufffb\031\ufffb\033\ufffb\001\002\000\004\026" +
    "\102\001\002\000\016\021\ufff9\023\ufff9\024\ufff9\027\ufff9" +
    "\031\ufff9\033\ufff9\001\002\000\004\045\047\001\002\000" +
    "\004\040\105\001\002\000\004\043\106\001\002\000\004" +
    "\045\047\001\002\000\004\042\110\001\002\000\004\030" +
    "\111\001\002\000\016\021\ufff8\023\ufff8\024\ufff8\027\ufff8" +
    "\031\ufff8\033\ufff8\001\002\000\004\025\113\001\002\000" +
    "\016\021\ufffa\023\ufffa\024\ufffa\027\ufffa\031\ufffa\033\ufffa" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\006\002\003\005\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\006\005\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\036\011\035\001\001\000\014" +
    "\003\111\006\041\007\045\010\044\012\042\001\001\000" +
    "\002\001\001\000\014\003\100\006\041\007\045\010\044" +
    "\012\042\001\001\000\002\001\001\000\014\003\043\006" +
    "\041\007\045\010\044\012\042\001\001\000\002\001\001" +
    "\000\006\004\036\011\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\070\006\041" +
    "\007\045\010\044\012\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\072\006\041\007\045" +
    "\010\044\012\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\075\006\041\007\045\010\044\012\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\103" +
    "\006\041\007\045\010\044\012\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\106\006\041\007\045" +
    "\010\044\012\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 //METODOS DEL PARSER//            
      public static void main(String args[]) throws Exception{
		// new parser(new analizador2(new FileInputStream(args[0]))).parse();
		new parser2(new analizador2(System.in)).parse();
	}
	public void syntax_error(Symbol s){
		report_error("Error de sintaxis. Linea: " + (s.right + 1) +
		" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
	}
public static Hashtable<String,SimboloPosiciones> Tsimbolos2 =new Hashtable<String,SimboloPosiciones>(); 
public int key2 =1;  
public int keyE =1;
public static Hashtable<String,SimboloE> TsimbolosE =new Hashtable<String,SimboloE>(); 




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ESCENARIOS S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= ESCENARIOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESCENARIOS ::= menorq escenario nombre igual id pcoma fondo igual id pcoma ancho igual num pcoma alto igual num mayorq ESC cescenario 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int val4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		         
               SimboloE nuevo = new SimboloE();
               nuevo.setId(Integer.toString(keyE));
               nuevo.setNombre(val1);
               nuevo.setfondo(val2);
               nuevo.setancho(val3);
               nuevo.setalto(val4);
               TsimbolosE.put("1",nuevo);
               keyE++;
               System.out.println(TsimbolosE.get("1").getId()+TsimbolosE.get("1").getNombre()+TsimbolosE.get("1").getfondo()+ TsimbolosE.get("1").getancho()+TsimbolosE.get("1").getalto());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCENARIOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESC ::= ESCENARIO ESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESC ::= ESCENARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESC",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESCENARIO ::= personajes heroes POSICIONES cheroes villanos POSICIONES cvillanos cpersonajes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCENARIO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESCENARIO ::= paredes POSICIONES cparedes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCENARIO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESCENARIO ::= suelo POSICIONES csuelo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCENARIO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESCENARIO ::= extras armas POSICIONES carmas bonus POSICIONES cbonus cextras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCENARIO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESCENARIO ::= meta POSICIONES cmeta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCENARIO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // POSICIONES ::= POS POSICIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSICIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // POSICIONES ::= POS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSICIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // POS ::= P1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // POS ::= P2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // POS ::= P3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // P1 ::= id pizq num coma num pder pcoma 
            {
              Object RESULT =null;
		int val0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		     SimboloPosiciones nuevo = new SimboloPosiciones();
               nuevo.setId(Integer.toString(key2));
               nuevo.setNombre(val0);
               nuevo.setposix(val1);
               nuevo.setposiy(val2);
               nuevo.setposfx("0");
               nuevo.setposfy("0");
               Tsimbolos2.put("1",nuevo);
               key2++;
               System.out.println(Tsimbolos2.get("1").getId()+Tsimbolos2.get("1").getNombre()+Tsimbolos2.get("1").getposix()+Tsimbolos2.get("1").getposiy());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // P2 ::= id pizq num rp num coma num pder pcoma 
            {
              Object RESULT =null;
		int val0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int val0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String val0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		     SimboloPosiciones nuevo = new SimboloPosiciones();
               nuevo.setId(Integer.toString(key2));
               nuevo.setNombre(val0);
               nuevo.setposix(val1);
               nuevo.setposiy(val3);
               nuevo.setposfx(val2);
               nuevo.setposfy("0");
               Tsimbolos2.put("2",nuevo);
               key2++;
               System.out.println(Tsimbolos2.get("2").getId()+Tsimbolos2.get("2").getNombre()+Tsimbolos2.get("2").getposix()+Tsimbolos2.get("2").getposiy());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // P3 ::= id pizq num coma num rp num pder pcoma 
            {
              Object RESULT =null;
		int val0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int val0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String val0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		     SimboloPosiciones nuevo = new SimboloPosiciones();
               nuevo.setId(Integer.toString(key2));
               nuevo.setNombre(val0);
               nuevo.setposix(val1);
               nuevo.setposiy(val2);
               nuevo.setposfx("0");
               nuevo.setposfy(val3);
               Tsimbolos2.put("3",nuevo);
               key2++;
               System.out.println(Tsimbolos2.get("3").getId()+Tsimbolos2.get("3").getNombre()+Tsimbolos2.get("3").getposix()+Tsimbolos2.get("3").getposiy());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
    }

}
